id: 05_gcp_kv
namespace: zoomcamp

inputs:
  - id: plan_type
    type: SELECT
    displayName: Select plan type
    values: [ medical, dental ]
    defaults: medical

  - id: entity_type
    type: SELECT
    displayName: Select entity type
    values: [ individual, shop ]
    defaults: individual

  - id: plan_year
    type: SELECT
    displayName: Select plan year
    values: [ "2022", "2023", "2024", "2025" ]
    description: Select the year for which you want to get the data
    defaults: "2025"

variables:
  file_id: "{{inputs.entity_type}}_market_{{inputs.plan_type}}"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/{{inputs.entity_type}}/{{inputs.plan_type}}/{{vars.file_id}}.parquet"
  table: "{{kv('GCP_DATASET')}}.{{inputs.entity_type}}_market_{{inputs.plan_type}}_{{inputs.plan_year}}"
  data: "{{ outputs.parquet_output.outputFiles[inputs.entity_type ~ '_market_' ~ inputs.plan_type ~ '.parquet'] }}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      plan_type: "{{inputs.plan_type}}"
      plan_year: "{{inputs.plan_year}}"
      entity_type: "{{inputs.entity_type}}"
      file_id: "{{ vars.file_id }}"

  - id: get_zipfile
    type: io.kestra.plugin.core.http.Download
    uri: https://data.healthcare.gov/datafile/py{{inputs.plan_year}}/{{ render(vars.file_id) }}.zip

  - id: unzip
    type: io.kestra.plugin.compress.ArchiveDecompress
    algorithm: ZIP
    from: "{{ outputs.get_zipfile.uri }}"

  - id: parquet_output
    type: io.kestra.plugin.scripts.python.Script
    warningOnStdErr: false
    beforeCommands:
      - pip install openpyxl pyarrow
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    containerImage: ghcr.io/kestra-io/pydata:latest
    env:
      FILE_ID: "{{ render(vars.file_id) }}"
    inputFiles: "{{ outputs.unzip.files }}"
    script: |
      import os
      import pandas as pd
      file_id = os.environ["FILE_ID"]
      # create a variable that converts file_id to camel case
      sheet_name = '_'.join([word.capitalize() for word in file_id.split('_')])
      file = f"{file_id}.xlsx"
      try:
          # check if the file exists in the input files
          input_files = [f for f in os.listdir('.') if f.endswith('.xlsx')]
          if not input_files:
              raise FileNotFoundError(f"{file} not found in the input files")
          file = input_files[0]  # take the first matching file
      except FileNotFoundError as e:
          print(e)
          raise e
      df = pd.read_excel(file, sheet_name=0, header=1)
      #rename columns
      df.columns = df.columns.str.replace(" ", "_").str.lower()
      # move column names not be beginning with a number
      cols = df.columns.tolist()
      cols = [col.replace("-", "") for col in cols]
      # remove special characters
      cols = [col.replace("(", "") for col in cols]
      cols = [col.replace(")", "") for col in cols]
      cols = [col.replace("+", "_") for col in cols]
      cols = [col.replace(",", "") for col in cols]
      # remove extra underscores
      cols = [col.replace("__", "_") for col in cols]
      # remove leading and trailing underscores
      cols = [col.strip("_") for col in cols]
      # remove leading and trailing whitespace
      cols = [col.strip() for col in cols]
      cols = [col for col in cols if not col[0].isdigit()] + [col for col in cols if col[0].isdigit()]
      # replace digit with letter in column names such as 73 seventy three
      cols = [col.replace("73", "seventy_three") for col in cols]
      cols = [col.replace("87", "eighty_seven") for col in cols]
      cols = [col.replace("94", "ninety_four") for col in cols]
      cols = [col.replace("014", "fourteen") for col in cols]
      cols = [col.replace("18", "eighteen") for col in cols]
      cols = [col.replace("21", "twenty_one") for col in cols]
      cols = [col.replace("27", "twenty_seven") for col in cols]
      cols = [col.replace("30", "thirty") for col in cols]
      cols = [col.replace("40", "forty") for col in cols]
      cols = [col.replace("50", "fifty") for col in cols]
      cols = [col.replace("60", "sixty") for col in cols]
      cols = [col.replace("1", "one") for col in cols]
      cols = [col.replace("2", "two") for col in cols]
      cols = [col.replace("3", "three") for col in cols]
      df.columns = cols
      df.to_parquet(f"{file_id}.parquet")
    outputFiles:
      - "*.parquet"

  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"

  - id: create_external_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
       OPTIONS (
         format = 'PARQUET',
         uris = ['{{render(vars.gcs_file)}}']
       );

  - id: if_individual_market_medical
    description: Create table for individual market medical data
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.plan_type == 'medical' and inputs.entity_type == 'individual'}}"
    then:
      - id: create_individual_market_medical_data_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.individual_market_medical_data` 
          (
          state_code STRING,
          fips_county_code INT64,
          county_name STRING,
          metal_level STRING,
          issuer_name STRING,
          hios_issuer_id INT64,
          plan_id_standard_component STRING,
          plan_marketing_name STRING,
          standardized_plan_option STRING,
          plan_type STRING,
          rating_area STRING,
          child_only_offering STRING,
          source STRING,
          customer_service_phone_number_local STRING,
          customer_service_phone_number_toll_free STRING,
          customer_service_phone_number_tty STRING,
          network_url STRING,
          plan_brochure_url STRING,
          summary_of_benefits_url STRING,
          drug_formulary_url STRING,
          adult_dental STRING,
          child_dental STRING,
          ehb_percent_of_total_premium STRING,
          premium_scenarios FLOAT64,
          premium_child_age_fourteen FLOAT64,
          premium_child_age_eighteen FLOAT64,
          premium_adult_individual_age_twenty_one FLOAT64,
          premium_adult_individual_age_twenty_seven FLOAT64,
          premium_adult_individual_age_thirty FLOAT64,
          premium_adult_individual_age_forty FLOAT64,
          premium_adult_individual_age_fifty FLOAT64,
          premium_adult_individual_age_sixty FLOAT64,
          premium_couple_twenty_one FLOAT64,
          premium_couple_thirty FLOAT64,
          premium_couple_forty FLOAT64,
          premium_couple_fifty FLOAT64,
          premium_couple_sixty FLOAT64,
          couple_one_child_age_twenty_one FLOAT64,
          couple_one_child_age_thirty FLOAT64,
          couple_one_child_age_forty FLOAT64,
          couple_one_child_age_fifty FLOAT64,
          couple_two_children_age_twenty_one FLOAT64,
          couple_two_children_age_thirty FLOAT64,
          couple_two_children_age_forty FLOAT64,
          couple_two_children_age_fifty FLOAT64,
          couple_three_or_more_children_age_twenty_one FLOAT64,
          couple_three_or_more_children_age_thirty FLOAT64,
          couple_three_or_more_children_age_forty FLOAT64,
          couple_three_or_more_children_age_fifty FLOAT64,
          individual_one_child_age_twenty_one FLOAT64,
          individual_one_child_age_thirty FLOAT64,
          individual_one_child_age_forty FLOAT64,
          individual_one_child_age_fifty FLOAT64,
          individual_two_children_age_twenty_one FLOAT64,
          individual_two_children_age_thirty FLOAT64,
          individual_two_children_age_forty FLOAT64,
          individual_two_children_age_fifty FLOAT64,
          individual_three_or_more_children_age_twenty_one FLOAT64,
          individual_three_or_more_children_age_thirty FLOAT64,
          individual_three_or_more_children_age_forty FLOAT64,
          individual_three_or_more_children_age_fifty FLOAT64,
          standard_plan_cost_sharing FLOAT64,
          medical_deductible_individual_standard STRING,
          drug_deductible_individual_standard STRING,
          medical_deductible_family_standard STRING,
          drug_deductible_family_standard STRING,
          medical_deductible_family_per_person_standard STRING,
          drug_deductible_family_per_person_standard STRING,
          medical_maximum_out_of_pocket_individual_standard STRING,
          drug_maximum_out_of_pocket_individual_standard STRING,
          medical_maximum_out_of_pocket_family_standard STRING,
          drug_maximum_out_of_pocket_family_standard STRING,
          medical_maximum_out_of_pocket_family_per_person_standard STRING,
          drug_maximum_out_of_pocket_family_per_person_standard STRING,
          primary_care_physician_standard STRING,
          specialist_standard STRING,
          emergency_room_standard STRING,
          inpatient_facility_standard STRING,
          inpatient_physician_standard STRING,
          generic_drugs_standard STRING,
          preferred_brand_drugs_standard STRING,
          nonpreferred_brand_drugs_standard STRING,
          specialty_drugs_standard STRING,
          medical_deductible_individual_seventy_three_percent FLOAT64,
          drug_deductible_individual_seventy_three_percent STRING,
          medical_deductible_family_seventy_three_percent STRING,
          drug_deductible_family_seventy_three_percent STRING,
          medical_deductible_family_per_person_seventy_three_percent STRING,
          drug_deductible_family_per_person_seventy_three_percent STRING,
          medical_maximum_out_of_pocket_individual_seventy_three_percent STRING,
          drug_maximum_out_of_pocket_individual_seventy_three_percent STRING,
          medical_maximum_out_of_pocket_family_seventy_three_percent STRING,
          drug_maximum_out_of_pocket_family_seventy_three_percent STRING,
          medical_maximum_out_of_pocket_family_per_person_seventy_three_percent STRING,
          drug_maximum_out_of_pocket_family_per_person_seventy_three_percent STRING,
          primary_care_physician_seventy_three_percent STRING,
          specialist_seventy_three_percent STRING,
          emergency_room_seventy_three_percent STRING,
          inpatient_facility_seventy_three_percent STRING,
          inpatient_physician_seventy_three_percent STRING,
          generic_drugs_seventy_three_percent STRING,
          preferred_brand_drugs_seventy_three_percent STRING,
          nonpreferred_brand_drugs_seventy_three_percent STRING,
          specialty_drugs_seventy_three_percent STRING,
          medical_deductible_individual_eighty_seven_percent STRING,
          drug_deductible_individual_eighty_seven_percent FLOAT64,
          medical_deductible_family_eighty_seven_percent STRING,
          drug_deductible_family_eighty_seven_percent STRING,
          medical_deductible_family_per_person_eighty_seven_percent STRING,
          drug_deductible_family_per_person_eighty_seven_percent STRING,
          medical_maximum_out_of_pocket_individual_eighty_seven_percent STRING,
          drug_maximum_out_of_pocket_individual_eighty_seven_percent STRING,
          medical_maximum_out_of_pocket_family_eighty_seven_percent STRING,
          drug_maximum_out_of_pocket_family_eighty_seven_percent STRING,
          medical_maximum_out_of_pocket_family_per_person_eighty_seven_percent STRING,
          drug_maximum_out_of_pocket_family_per_person_eighty_seven_percent STRING,
          primary_care_physician_eighty_seven_percent STRING,
          specialist_eighty_seven_percent STRING,
          emergency_room_eighty_seven_percent STRING,
          inpatient_facility_eighty_seven_percent STRING,
          inpatient_physician_eighty_seven_percent STRING,
          generic_drugs_eighty_seven_percent STRING,
          preferred_brand_drugs_eighty_seven_percent STRING,
          nonpreferred_brand_drugs_eighty_seven_percent STRING,
          specialty_drugs_eighty_seven_percent STRING,
          medical_deductible_individual_ninety_four_percent STRING,
          drug_deductible_individual_ninety_four_percent STRING,
          medical_deductible_family_ninety_four_percent FLOAT64,
          drug_deductible_family_ninety_four_percent STRING,
          medical_deductible_family_per_person_ninety_four_percent STRING,
          drug_deductible_family_per_person_ninety_four_percent STRING,
          medical_maximum_out_of_pocket_individual_ninety_four_percent STRING,
          drug_maximum_out_of_pocket_individual_ninety_four_percent STRING,
          medical_maximum_out_of_pocket_family_ninety_four_percent STRING,
          drug_maximum_out_of_pocket_family__ninety_four_percent STRING,
          medical_maximum_out_of_pocket_family_per_person_ninety_four_percent STRING,
          drug_maximum_out_of_pocket_family_per_person_ninety_four_percent STRING,
          primary_care_physician_ninety_four_percent STRING,
          specialist_ninety_four_percent STRING,
          emergency_room_ninety_four_percent STRING,
          inpatient_facility_ninety_four_percent STRING,
          inpatient_physician_ninety_four_percent STRING,
          generic_drugs_ninety_four_percent STRING,
          preferred_brand_drugs_ninety_four_percent STRING,
          nonpreferred_brand_drugs_ninety_four_percent STRING,
          specialty_drugs_ninety_four_percent STRING,
          seventy_three_percent_actuarial_value_silver_plan_cost_sharing STRING,
          eighty_seven_percent_actuarial_value_silver_plan_cost_sharing STRING,
          ninety_four_percent_actuarial_value_silver_plan_cost_sharing STRING,
          formatted_date date,
          )
          PARTITION by formatted_date
          cluster by state_code, fips_county_code;

      - id: insert_individual_market_medical_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          DELETE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.individual_market_medical_data` where formatted_date = DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01);
          INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.individual_market_medical_data`
          SELECT *, DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01)  AS formatted_date FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: if_shop_market_medical
    description: Create table for individual market medical data
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.plan_type == 'medical' and inputs.entity_type == 'shop'}}"
    then:
      - id: create_shop_market_medical_data_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.shop_market_medical_data` 
          (
          state_code STRING,
          fips_county_code INT64,
          county_name STRING,
          metal_level STRING,
          issuer_name STRING,
          hios_issuer_id INT64,
          plan_id_standard_component STRING,
          plan_marketing_name STRING,
          plan_type STRING,
          rating_area STRING,
          child_only_offering STRING,
          source STRING,
          customer_service_phone_number_local STRING,
          customer_service_phone_number_toll_free STRING,
          customer_service_phone_number_tty STRING,
          network_url STRING,
          plan_brochure_url STRING,
          summary_of_benefits_url STRING,
          drug_formulary_url STRING,
          adult_dental STRING,
          child_dental STRING,
          premium_scenarios FLOAT64,
          premium_child_age_fourteen FLOAT64,
          premium_child_age_eighteen FLOAT64,
          premium_adult_individual_age_twenty_one FLOAT64,
          premium_adult_individual_age_twenty_seven FLOAT64,
          premium_adult_individual_age_thirty FLOAT64,
          premium_adult_individual_age_forty FLOAT64,
          premium_adult_individual_age_fifty FLOAT64,
          premium_adult_individual_age_sixty FLOAT64,
          premium_couple_twenty_one FLOAT64,
          premium_couple_thirty FLOAT64,
          premium_couple_forty FLOAT64,
          premium_couple_fifty FLOAT64,
          premium_couple_sixty FLOAT64,
          couple_one_child_age_twenty_one FLOAT64,
          couple_one_child_age_thirty FLOAT64,
          couple_one_child_age_forty FLOAT64,
          couple_one_child_age_fifty FLOAT64,
          couple_two_children_age_twenty_one FLOAT64,
          couple_two_children_age_thirty FLOAT64,
          couple_two_children_age_forty FLOAT64,
          couple_two_children_age_fifty FLOAT64,
          couple_three_or_more_children_age_twenty_one FLOAT64,
          couple_three_or_more_children_age_thirty FLOAT64,
          couple_three_or_more_children_age_forty FLOAT64,
          couple_three_or_more_children_age_fifty FLOAT64,
          individual_one_child_age_twenty_one FLOAT64,
          individual_one_child_age_thirty FLOAT64,
          individual_one_child_age_forty FLOAT64,
          individual_one_child_age_fifty FLOAT64,
          individual_two_children_age_twenty_one FLOAT64,
          individual_two_children_age_thirty FLOAT64,
          individual_two_children_age_forty FLOAT64,
          individual_two_children_age_fifty FLOAT64,
          individual_three_or_more_children_age_twenty_one FLOAT64,
          individual_three_or_more_children_age_thirty FLOAT64,
          individual_three_or_more_children_age_forty FLOAT64,
          individual_three_or_more_children_age_fifty FLOAT64,
          standard_plan_cost_sharing FLOAT64,
          medical_deductible_individual_standard STRING,
          drug_deductible_individual_standard STRING,
          medical_deductible_family_standard STRING,
          drug_deductible_family_standard STRING,
          medical_deductible_family_per_person_standard STRING,
          drug_deductible_family_per_person_standard STRING,
          medical_maximum_out_of_pocket_individual_standard STRING,
          drug_maximum_out_of_pocket_individual_standard STRING,
          medical_maximum_out_of_pocket_family_standard STRING,
          drug_maximum_out_of_pocket_family_standard STRING,
          medical_maximum_out_of_pocket_family_per_person_standard STRING,
          drug_maximum_out_of_pocket_family_per_person_standard STRING,
          primary_care_physician_standard STRING,
          specialist_standard STRING,
          emergency_room_standard STRING,
          inpatient_facility_standard STRING,
          inpatient_physician_standard STRING,
          generic_drugs_standard STRING,
          preferred_brand_drugs_standard STRING,
          nonpreferred_brand_drugs_standard STRING,
          specialty_drugs_standard STRING,
          formatted_date date,
          )
          PARTITION by formatted_date
          cluster by state_code, fips_county_code;

      - id: insert_shop_market_medical_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          DELETE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.shop_market_medical_data` where formatted_date = DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01);
          INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.shop_market_medical_data`
          SELECT CAST(state_code AS STRING) AS state_code,
          CAST(fips_county_code AS INT64) AS fips_county_code,
          CAST(county_name AS STRING) AS county_name,
          CAST(metal_level AS STRING) AS metal_level,
          CAST(issuer_name AS STRING) AS issuer_name,
          CAST(hios_issuer_id AS INT64) AS hios_issuer_id,
          CAST(plan_id_standard_component AS STRING) AS plan_id_standard_component,
          CAST(plan_marketing_name AS STRING) AS plan_marketing_name,
          CAST(plan_type AS STRING) AS plan_type,
          CAST(rating_area AS STRING) AS rating_area,
          CAST(child_only_offering AS STRING) AS child_only_offering,
          CAST(source AS STRING) AS source,
          CAST(customer_service_phone_number_local AS STRING) AS customer_service_phone_number_local,
          CAST(customer_service_phone_number_toll_free AS STRING) AS customer_service_phone_number_toll_free,
          CAST(customer_service_phone_number_tty AS STRING) AS customer_service_phone_number_tty,
          CAST(network_url AS STRING) AS network_url,
          CAST(plan_brochure_url AS STRING) AS plan_brochure_url,
          CAST(summary_of_benefits_url AS STRING) AS summary_of_benefits_url,
          CAST(drug_formulary_url AS STRING) AS drug_formulary_url,
          CAST(adult_dental AS STRING) AS adult_dental,
          CAST(child_dental AS STRING) AS child_dental,
          CAST(premium_scenarios AS FLOAT64) AS premium_scenarios,
          CAST(premium_child_age_fourteen AS FLOAT64) AS premium_child_age_fourteen,
          CAST(premium_child_age_eighteen AS FLOAT64) AS premium_child_age_eighteen,
          CAST(premium_adult_individual_age_twenty_one AS FLOAT64) AS premium_adult_individual_age_twenty_one,
          CAST(premium_adult_individual_age_twenty_seven AS FLOAT64) AS premium_adult_individual_age_twenty_seven,
          CAST(premium_adult_individual_age_thirty AS FLOAT64) AS premium_adult_individual_age_thirty,
          CAST(premium_adult_individual_age_forty AS FLOAT64) AS premium_adult_individual_age_forty,
          CAST(premium_adult_individual_age_fifty AS FLOAT64) AS premium_adult_individual_age_fifty,
          CAST(premium_adult_individual_age_sixty AS FLOAT64) AS premium_adult_individual_age_sixty,
          CAST(premium_couple_twenty_one AS FLOAT64) AS premium_couple_twenty_one,
          CAST(premium_couple_thirty AS FLOAT64) AS premium_couple_thirty,
          CAST(premium_couple_forty AS FLOAT64) AS premium_couple_forty,
          CAST(premium_couple_fifty AS FLOAT64) AS premium_couple_fifty,
          CAST(premium_couple_sixty AS FLOAT64) AS premium_couple_sixty,
          CAST(couple_one_child_age_twenty_one AS FLOAT64) AS couple_one_child_age_twenty_one,
          CAST(couple_one_child_age_thirty AS FLOAT64) AS couple_one_child_age_thirty,
          CAST(couple_one_child_age_forty AS FLOAT64) AS couple_one_child_age_forty,
          CAST(couple_one_child_age_fifty AS FLOAT64) AS couple_one_child_age_fifty,
          CAST(couple_two_children_age_twenty_one AS FLOAT64) AS couple_two_children_age_twenty_one,
          CAST(couple_two_children_age_thirty AS FLOAT64) AS couple_two_children_age_thirty,
          CAST(couple_two_children_age_forty AS FLOAT64) AS couple_two_children_age_forty,
          CAST(couple_two_children_age_fifty AS FLOAT64) AS couple_two_children_age_fifty,
          CAST(couple_three_or_more_children_age_twenty_one AS FLOAT64) AS couple_three_or_more_children_age_twenty_one,
          CAST(couple_three_or_more_children_age_thirty AS FLOAT64) AS couple_three_or_more_children_age_thirty,
          CAST(couple_three_or_more_children_age_forty AS FLOAT64) AS couple_three_or_more_children_age_forty,
          CAST(couple_three_or_more_children_age_fifty AS FLOAT64) AS couple_three_or_more_children_age_fifty,
          CAST(individual_one_child_age_twenty_one AS FLOAT64) AS individual_one_child_age_twenty_one,
          CAST(individual_one_child_age_thirty AS FLOAT64) AS individual_one_child_age_thirty,
          CAST(individual_one_child_age_forty AS FLOAT64) AS individual_one_child_age_forty,
          CAST(individual_one_child_age_fifty AS FLOAT64) AS individual_one_child_age_fifty,
          CAST(individual_two_children_age_twenty_one AS FLOAT64) AS individual_two_children_age_twenty_one,
          CAST(individual_two_children_age_thirty AS FLOAT64) AS individual_two_children_age_thirty,
          CAST(individual_two_children_age_forty AS FLOAT64) AS individual_two_children_age_forty,
          CAST(individual_two_children_age_fifty AS FLOAT64) AS individual_two_children_age_fifty,
          CAST(individual_three_or_more_children_age_twenty_one AS FLOAT64) AS individual_three_or_more_children_age_twenty_one,
          CAST(individual_three_or_more_children_age_thirty AS FLOAT64) AS individual_three_or_more_children_age_thirty,
          CAST(individual_three_or_more_children_age_forty AS FLOAT64) AS individual_three_or_more_children_age_forty,
          CAST(individual_three_or_more_children_age_fifty AS FLOAT64) AS individual_three_or_more_children_age_fifty,
          CAST(standard_plan_cost_sharing AS FLOAT64) AS standard_plan_cost_sharing,
          CAST(medical_deductible_individual_standard AS STRING) AS medical_deductible_individual_standard,
          CAST(drug_deductible_individual_standard AS STRING) AS drug_deductible_individual_standard,
          CAST(medical_deductible_family_standard AS STRING) AS medical_deductible_family_standard,
          CAST(drug_deductible_family_standard AS STRING) AS drug_deductible_family_standard,
          CAST(medical_deductible_family_per_person_standard AS STRING) AS medical_deductible_family_per_person_standard,
          CAST(drug_deductible_family_per_person_standard AS STRING) AS drug_deductible_family_per_person_standard,
          CAST(medical_maximum_out_of_pocket_individual_standard AS STRING) AS medical_maximum_out_of_pocket_individual_standard,
          CAST(drug_maximum_out_of_pocket_individual_standard AS STRING) AS drug_maximum_out_of_pocket_individual_standard,
          CAST(medical_maximum_out_of_pocket_family_standard AS STRING) AS medical_maximum_out_of_pocket_family_standard,
          CAST(drug_maximum_out_of_pocket_family_standard AS STRING) AS drug_maximum_out_of_pocket_family_standard,
          CAST(medical_maximum_out_of_pocket_family_per_person_standard AS STRING) AS medical_maximum_out_of_pocket_family_per_person_standard,
          CAST(drug_maximum_out_of_pocket_family_per_person_standard AS STRING) AS drug_maximum_out_of_pocket_family_per_person_standard,
          CAST(primary_care_physician_standard AS STRING) AS primary_care_physician_standard,
          CAST(specialist_standard AS STRING) AS specialist_standard,
          CAST(emergency_room_standard AS STRING) AS emergency_room_standard,
          CAST(inpatient_facility_standard AS STRING) AS inpatient_facility_standard,
          CAST(inpatient_physician_standard AS STRING) AS inpatient_physician_standard,
          CAST(generic_drugs_standard AS STRING) AS generic_drugs_standard,
          CAST(preferred_brand_drugs_standard AS STRING) AS preferred_brand_drugs_standard,
          CAST(nonpreferred_brand_drugs_standard AS STRING) AS nonpreferred_brand_drugs_standard,
          CAST(specialty_drugs_standard AS STRING) AS specialty_drugs_standard, 
          DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01)  AS formatted_date FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: if_individual_market_dental
    description: Create table for individual market dental data
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.plan_type == 'dental' and inputs.entity_type == 'individual'}}"
    then:
      - id: create_individual_market_dental_data_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.individual_market_dental_data` 
          (
          state_code STRING,
          fips_county_code INT64,
          county_name STRING,
          metal_level STRING,
          issuer_name STRING,
          hios_issuer_id INT64,
          plan_id_standard_component STRING,
          plan_marketing_name STRING,
          plan_type STRING,
          rating_area STRING,
          child_only_offering STRING,
          source STRING,
          customer_service_phone_number_local STRING,
          customer_service_phone_number_toll_free STRING,
          customer_service_phone_number_tty STRING,
          network_url STRING,
          plan_brochure_url STRING,
          summary_of_benefits_url STRING,
          routine_dental_services_adult_coverage STRING,
          basic_dental_care_adult_coverage STRING,
          major_dental_care_adult_coverage STRING,
          orthodontia_adult_coverage STRING,
          dental_checkup_for_children_coverage STRING,
          basic_dental_care_child_coverage STRING,
          major_dental_care_child_coverage STRING,
          orthodontia_child_coverage STRING,
          premium_rates FLOAT64,
          premium_child_age_fourteen FLOAT64,
          premium_child_age_eighteen FLOAT64,
          premium_adult_individual_age_twenty_one FLOAT64,
          premium_adult_individual_age_twenty_seven FLOAT64,
          premium_adult_individual_age_thirty FLOAT64,
          premium_adult_individual_age_forty FLOAT64,
          premium_adult_individual_age_fifty FLOAT64,
          premium_adult_individual_age_sixty FLOAT64,
          premium_couple_twenty_one FLOAT64,
          premium_couple_thirty FLOAT64,
          premium_couple_forty FLOAT64,
          premium_couple_fifty FLOAT64,
          premium_couple_sixty FLOAT64,
          couple_one_child_age_twenty_one FLOAT64,
          couple_one_child_age_thirty FLOAT64,
          couple_one_child_age_forty FLOAT64,
          couple_one_child_age_fifty FLOAT64,
          couple_two_children_age_twenty_one FLOAT64,
          couple_two_children_age_thirty FLOAT64,
          couple_two_children_age_forty FLOAT64,
          couple_two_children_age_fifty FLOAT64,
          couple_three_children_age_twenty_one FLOAT64,
          couple_three_children_age_thirty FLOAT64,
          couple_three_children_age_forty FLOAT64,
          couple_three_children_age_fifty FLOAT64,
          individual_one_child_age_twenty_one FLOAT64,
          individual_one_child_age_thirty FLOAT64,
          individual_one_child_age_forty FLOAT64,
          individual_one_child_age_fifty FLOAT64,
          individual_two_children_age_twenty_one FLOAT64,
          individual_two_children_age_thirty FLOAT64,
          individual_two_children_age_forty FLOAT64,
          individual_two_children_age_fifty FLOAT64,
          individual_three_children_age_twenty_one FLOAT64,
          individual_three_children_age_thirty FLOAT64,
          individual_three_children_age_forty FLOAT64,
          individual_three_children_age_fifty FLOAT64,
          standard_on_exchange FLOAT64,
          dental_deductible_individual_standard STRING,
          dental_deductible_family_standard STRING,
          dental_deductible_family_per_person_standard STRING,
          dental_maximum_out_of_pocket_individual_standard STRING,
          dental_maximum_out_of_pocket_family_standard STRING,
          dental_maximum_out_of_pocket_family_per_person_standard STRING,
          routine_dental_services_adult STRING,
          basic_dental_care_adult STRING,
          major_dental_care_adult STRING,
          orthodontia_adult STRING,
          dental_checkup_for_children STRING,
          basic_dental_care_child STRING,
          major_dental_care_child STRING,
          orthodontia_child STRING,
          formatted_date date,
          )
          PARTITION by formatted_date
          cluster by state_code, fips_county_code;

      - id: insert_individual_market_dental_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          DELETE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.individual_market_dental_data` where formatted_date = DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01);
          INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.individual_market_dental_data`
          SELECT *, DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01)  AS formatted_date FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: if_shop_market_dental
    description: Create table for shop market dental data
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.plan_type == 'dental' and inputs.entity_type == 'shop'}}"
    then:
      - id: create_shop_market_dental_data_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.shop_market_dental_data` 
          (
          state_code STRING,
            fips_county_code INT64,
            county_name STRING,
            metal_level STRING,
            issuer_name STRING,
            hios_issuer_id INT64,
            plan_id_standard_component STRING,
            plan_marketing_name STRING,
            plan_type STRING,
            rating_area STRING,
            child_only_offering STRING,
            source STRING,
            customer_service_phone_number_local STRING,
            customer_service_phone_number_toll_free STRING,
            customer_service_phone_number_tty STRING,
            network_url STRING,
            plan_brochure_url STRING,
            summary_of_benefits_url STRING,
            routine_dental_services_adult_coverage STRING,
            basic_dental_care_adult_coverage STRING,
            major_dental_care_adult_coverage STRING,
            orthodontia_adult_coverage STRING,
            dental_checkup_for_children_coverage STRING,
            basic_dental_care_child_coverage STRING,
            major_dental_care_child_coverage STRING,
            orthodontia_child_coverage STRING,
            premium_rates FLOAT64,
            premium_child_age_fourteen FLOAT64,
            premium_child_age_eighteen FLOAT64,
            premium_adult_individual_age_twenty_one FLOAT64,
            premium_adult_individual_age_twenty_seven FLOAT64,
            premium_adult_individual_age_thirty FLOAT64,
            premium_adult_individual_age_forty FLOAT64,
            premium_adult_individual_age_fifty FLOAT64,
            premium_adult_individual_age_sixty FLOAT64,
            premium_couple_twenty_one FLOAT64,
            premium_couple_thirty FLOAT64,
            premium_couple_forty FLOAT64,
            premium_couple_fifty FLOAT64,
            premium_couple_sixty FLOAT64,
            couple_one_child_age_twenty_one FLOAT64,
            couple_one_child_age_thirty FLOAT64,
            couple_one_child_age_forty FLOAT64,
            couple_one_child_age_fifty FLOAT64,
            couple_two_children_age_twenty_one FLOAT64,
            couple_two_children_age_thirty FLOAT64,
            couple_two_children_age_forty FLOAT64,
            couple_two_children_age_fifty FLOAT64,
            couple_three_children_age_twenty_one FLOAT64,
            couple_three_children_age_thirty FLOAT64,
            couple_three_children_age_forty FLOAT64,
            couple_three_children_age_fifty FLOAT64,
            individual_one_child_age_twenty_one FLOAT64,
            individual_one_child_age_thirty FLOAT64,
            individual_one_child_age_forty FLOAT64,
            individual_one_child_age_fifty FLOAT64,
            individual_two_children_age_twenty_one FLOAT64,
            individual_two_children_age_thirty FLOAT64,
            individual_two_children_age_forty FLOAT64,
            individual_two_children_age_fifty FLOAT64,
            individual_three_children_age_twenty_one FLOAT64,
            individual_three_children_age_thirty FLOAT64,
            individual_three_children_age_forty FLOAT64,
            individual_three_children_age_fifty FLOAT64,
            standard_on_exchange FLOAT64,
            dental_deductible_individual_standard STRING,
            dental_deductible_family_standard STRING,
            dental_deductible_family_per_person_standard STRING,
            dental_maximum_out_of_pocket_individual_standard STRING,
            dental_maximum_out_of_pocket_family_standard STRING,
            dental_maximum_out_of_pocket_family_per_person_standard STRING,
            routine_dental_services_adult STRING,
            basic_dental_care_adult STRING,
            major_dental_care_adult STRING,
            orthodontia_adult STRING,
            dental_checkup_for_children STRING,
            basic_dental_care_child STRING,
            major_dental_care_child STRING,
            orthodontia_child STRING,
            formatted_date date,
            )
            PARTITION by formatted_date
            cluster by state_code, fips_county_code;

      - id: insert_shop_market_dental_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          DELETE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.shop_market_dental_data` where formatted_date = DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01);
          INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.shop_market_dental_data`
          SELECT *, DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01)  AS formatted_date FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: get_benefits_and_cost_sharing_puf
    type: io.kestra.plugin.core.http.Download
    description: Download the benefits and cost sharing puf file
    uri: https://download.cms.gov/marketplace-puf/{{inputs.plan_year}}/benefits-and-cost-sharing-puf.zip

  - id: unzip_benefits_and_cost_sharing_puf
    type: io.kestra.plugin.compress.ArchiveDecompress
    description: Unzip the benefits and cost sharing puf file
    algorithm: ZIP
    from: "{{ outputs.get_benefits_and_cost_sharing_puf.uri }}"

 
  - id: upload_benefits_and_cost_sharing_puf
    type: io.kestra.plugin.gcp.gcs.Upload
    description: Upload the benefits and cost sharing puf file to GCS
    from: "{{ outputs.unzip_benefits_and_cost_sharing_puf.files['benefits-and-cost-sharing-puf.csv'] }}"
    to: "gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/benefits-and-cost-sharing-puf/{{inputs.plan_year}}_benefits-and-cost-sharing-puf.csv"

  - id: create_benefits_and_cost_sharing_puf_external_table
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Create temporary external table for benefits and cost sharing puf data
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.benefits_and_cost_sharing_puf_{{inputs.plan_year}}_ext`
      OPTIONS (
        format = 'CSV',
        uris = ['gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/benefits-and-cost-sharing-puf/*.csv']
      );

  - id: create_benefits_and_cost_sharing_puf_table
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Create external table for benefits and cost sharing puf data
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.benefits_and_cost_sharing_puf` (
        BusinessYear INT64,
        StateCode STRING,
        IssuerId INT64,
        SourceName STRING,
        ImportDate TIMESTAMP,
        StandardComponentId STRING,
        PlanId STRING,
        BenefitName STRING,
        CopayInnTier1 STRING,
        CopayInnTier2 STRING,
        CopayOutofNet STRING,
        CoinsInnTier1 STRING,
        CoinsInnTier2 STRING,
        CoinsOutofNet STRING,
        IsEHB BOOL,
        IsCovered STRING,
        QuantLimitOnSvc BOOL,
        LimitQty FLOAT64,
        LimitUnit STRING,
        Exclusions STRING,
        Explanation STRING,
        EHBVarReason STRING,
        IsExclFromInnMOOP BOOL,
        IsExclFromOonMOOP BOOL,
        formatted_date date,
        )
        PARTITION by formatted_date;
  
  - id: insert_benefits_and_cost_sharing_puf_data
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Insert data into the benefits and cost sharing puf external table
    sql: |
      DELETE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.benefits_and_cost_sharing_puf` where formatted_date = DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01);
      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.benefits_and_cost_sharing_puf`
      SELECT *, DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01)  AS formatted_date FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.benefits_and_cost_sharing_puf_{{inputs.plan_year}}_ext`;

  - id: get_plan_attributes_puf
    type: io.kestra.plugin.core.http.Download
    description: Download the plan attributes puf file
    uri: https://download.cms.gov/marketplace-puf/{{inputs.plan_year}}/plan-attributes-puf.zip

  - id: unzip_plan_attributes_puf
    type: io.kestra.plugin.compress.ArchiveDecompress
    description: Unzip the plan attributes puf file
    algorithm: ZIP
    from: "{{ outputs.get_plan_attributes_puf.uri }}"

  - id: upload_plan_attributes_puf
    type: io.kestra.plugin.gcp.gcs.Upload
    description: Upload the plan attributes puf file to GCS
    from: "{{ outputs.unzip_plan_attributes_puf.files['plan-attributes-puf.csv'] }}"
    to: "gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/plan-attributes-puf/{{inputs.plan_year}}_plan-attributes-puf.csv"

  - id: create_plan_attributes_puf_external_table
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Create temporary external table for benefits and cost sharing puf data
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.plan_attributes_puf_{{inputs.plan_year}}_ext`
      OPTIONS (
        format = 'CSV',
        uris = ['gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/plan-attributes-puf/*.csv']
      );

  - id: create_plan_attributes_puf_table 
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Create external table for plan attributes puf data
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.plan_attributes_puf` (
      BusinessYear INT64,
      StateCode STRING,
      IssuerId INT64,
      IssuerMarketPlaceMarketingName STRING,
      SourceName STRING,
      ImportDate TIMESTAMP,
      MarketCoverage STRING,
      DentalOnlyPlan BOOL,
      StandardComponentId STRING,
      PlanMarketingName STRING,
      HIOSProductId STRING,
      NetworkId STRING,
      ServiceAreaId STRING,
      FormularyId STRING,
      IsNewPlan STRING,
      PlanType STRING,
      MetalLevel STRING,
      DesignType STRING,
      UniquePlanDesign BOOL,
      QHPNonQHPTypeId STRING,
      IsNoticeRequiredForPregnancy BOOL,
      IsReferralRequiredForSpecialist BOOL,
      SpecialistRequiringReferral STRING,
      PlanLevelExclusions STRING,
      IndianPlanVariationEstimatedAdvancedPaymentAmountPerEnrollee INT64,
      CompositeRatingOffered BOOL,
      ChildOnlyOffering STRING,
      ChildOnlyPlanId STRING,
      WellnessProgramOffered BOOL,
      DiseaseManagementProgramsOffered STRING,
      EHBPercentTotalPremium FLOAT64,
      EHBPediatricDentalApportionmentQuantity FLOAT64,
      IsGuaranteedRate STRING,
      PlanEffectiveDate DATE,
      PlanExpirationDate DATE,
      OutOfCountryCoverage BOOL,
      OutOfCountryCoverageDescription STRING,
      OutOfServiceAreaCoverage BOOL,
      OutOfServiceAreaCoverageDescription STRING,
      NationalNetwork BOOL,
      URLForEnrollmentPayment STRING,
      FormularyURL STRING,
      PlanId STRING,
      PlanVariantMarketingName STRING,
      CSRVariationType STRING,
      IssuerActuarialValue FLOAT64,
      AVCalculatorOutputNumber FLOAT64,
      MedicalDrugDeductiblesIntegrated BOOL,
      MedicalDrugMaximumOutofPocketIntegrated BOOL,
      MultipleInNetworkTiers BOOL,
      FirstTierUtilization FLOAT64,
      SecondTierUtilization FLOAT64,
      SBCHavingaBabyDeductible INT64,
      SBCHavingaBabyCopayment INT64,
      SBCHavingaBabyCoinsurance INT64,
      SBCHavingaBabyLimit INT64,
      SBCHavingDiabetesDeductible INT64,
      SBCHavingDiabetesCopayment INT64,
      SBCHavingDiabetesCoinsurance INT64,
      SBCHavingDiabetesLimit INT64,
      SBCHavingSimplefractureDeductible INT64,
      SBCHavingSimplefractureCopayment INT64,
      SBCHavingSimplefractureCoinsurance INT64,
      SBCHavingSimplefractureLimit INT64,
      SpecialtyDrugMaximumCoinsurance INT64,
      InpatientCopaymentMaximumDays INT64,
      BeginPrimaryCareCostSharingAfterNumberOfVisits INT64,
      BeginPrimaryCareDeductibleCoinsuranceAfterNumberOfCopays INT64,
      MEHBInnTier1IndividualMOOP STRING,
      MEHBInnTier1FamilyPerPersonMOOP STRING,
      MEHBInnTier1FamilyPerGroupMOOP STRING,
      MEHBInnTier2IndividualMOOP STRING,
      MEHBInnTier2FamilyPerPersonMOOP STRING,
      MEHBInnTier2FamilyPerGroupMOOP STRING,
      MEHBOutOfNetIndividualMOOP STRING,
      MEHBOutOfNetFamilyPerPersonMOOP STRING,
      MEHBOutOfNetFamilyPerGroupMOOP STRING,
      MEHBCombInnOonIndividualMOOP STRING,
      MEHBCombInnOonFamilyPerPersonMOOP STRING,
      MEHBCombInnOonFamilyPerGroupMOOP STRING,
      DEHBInnTier1IndividualMOOP INT64,
      DEHBInnTier1FamilyPerPersonMOOP STRING,
      DEHBInnTier1FamilyPerGroupMOOP STRING,
      DEHBInnTier2IndividualMOOP STRING,
      DEHBInnTier2FamilyPerPersonMOOP STRING,
      DEHBInnTier2FamilyPerGroupMOOP STRING,
      DEHBOutOfNetIndividualMOOP INT64,
      DEHBOutOfNetFamilyPerPersonMOOP STRING,
      DEHBOutOfNetFamilyPerGroupMOOP STRING,
      DEHBCombInnOonIndividualMOOP STRING,
      DEHBCombInnOonFamilyPerPersonMOOP STRING,
      DEHBCombInnOonFamilyPerGroupMOOP STRING,
      TEHBInnTier1IndividualMOOP INT64,
      TEHBInnTier1FamilyPerPersonMOOP STRING,
      TEHBInnTier1FamilyPerGroupMOOP STRING,
      TEHBInnTier2IndividualMOOP INT64,
      TEHBInnTier2FamilyPerPersonMOOP STRING,
      TEHBInnTier2FamilyPerGroupMOOP STRING,
      TEHBOutOfNetIndividualMOOP STRING,
      TEHBOutOfNetFamilyPerPersonMOOP STRING,
      TEHBOutOfNetFamilyPerGroupMOOP STRING,
      TEHBCombInnOonIndividualMOOP STRING,
      TEHBCombInnOonFamilyPerPersonMOOP STRING,
      TEHBCombInnOonFamilyPerGroupMOOP STRING,
      MEHBDedInnTier1Individual STRING,
      MEHBDedInnTier1FamilyPerPerson STRING,
      MEHBDedInnTier1FamilyPerGroup STRING,
      MEHBDedInnTier1Coinsurance FLOAT64,
      MEHBDedInnTier2Individual STRING,
      MEHBDedInnTier2FamilyPerPerson STRING,
      MEHBDedInnTier2FamilyPerGroup STRING,
      MEHBDedInnTier2Coinsurance FLOAT64,
      MEHBDedOutOfNetIndividual STRING,
      MEHBDedOutOfNetFamilyPerPerson STRING,
      MEHBDedOutOfNetFamilyPerGroup STRING,
      MEHBDedCombInnOonIndividual STRING,
      MEHBDedCombInnOonFamilyPerPerson STRING,
      MEHBDedCombInnOonFamilyPerGroup STRING,
      DEHBDedInnTier1Individual STRING,
      DEHBDedInnTier1FamilyPerPerson STRING,
      DEHBDedInnTier1FamilyPerGroup STRING,
      DEHBDedInnTier1Coinsurance FLOAT64,
      DEHBDedInnTier2Individual STRING,
      DEHBDedInnTier2FamilyPerPerson STRING,
      DEHBDedInnTier2FamilyPerGroup STRING,
      DEHBDedInnTier2Coinsurance FLOAT64,
      DEHBDedOutOfNetIndividual STRING,
      DEHBDedOutOfNetFamilyPerPerson STRING,
      DEHBDedOutOfNetFamilyPerGroup STRING,
      DEHBDedCombInnOonIndividual STRING,
      DEHBDedCombInnOonFamilyPerPerson STRING,
      DEHBDedCombInnOonFamilyPerGroup STRING,
      TEHBDedInnTier1Individual INT64,
      TEHBDedInnTier1FamilyPerPerson STRING,
      TEHBDedInnTier1FamilyPerGroup STRING,
      TEHBDedInnTier1Coinsurance FLOAT64,
      TEHBDedInnTier2Individual INT64,
      TEHBDedInnTier2FamilyPerPerson STRING,
      TEHBDedInnTier2FamilyPerGroup STRING,
      TEHBDedInnTier2Coinsurance FLOAT64,
      TEHBDedOutOfNetIndividual STRING,
      TEHBDedOutOfNetFamilyPerPerson STRING,
      TEHBDedOutOfNetFamilyPerGroup STRING,
      TEHBDedCombInnOonIndividual STRING,
      TEHBDedCombInnOonFamilyPerPerson STRING,
      TEHBDedCombInnOonFamilyPerGroup STRING,
      IsHSAEligible BOOL,
      HSAOrHRAEmployerContribution BOOL,
      HSAOrHRAEmployerContributionAmount STRING,
      URLForSummaryofBenefitsCoverage STRING,
      PlanBrochure STRING,
      formatted_date date,
      )
      PARTITION by formatted_date;

  - id: insert_plan_attributes_puf_data
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Insert data into the plan attributes puf table
    sql: |
      DELETE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.plan_attributes_puf` where formatted_date = DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01);
      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.plan_attributes_puf`
      SELECT *, DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01)  AS formatted_date FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.plan_attributes_puf_{{inputs.plan_year}}_ext`;

  - id: get_service_area_puf
    type: io.kestra.plugin.core.http.Download
    description: Download the service areas puf file
    uri: https://download.cms.gov/marketplace-puf/{{inputs.plan_year}}/service-area-puf.zip

  - id: unzip_service_area_puf
    type: io.kestra.plugin.compress.ArchiveDecompress
    description: Unzip the service areas puf file
    algorithm: ZIP
    from: "{{ outputs.get_service_area_puf.uri }}"

  - id: upload_service_area_puf
    type: io.kestra.plugin.gcp.gcs.Upload
    description: Upload the service areas puf file to GCS
    from: "{{ outputs.unzip_service_area_puf.files['service-area-puf.csv'] }}"
    to: "gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/service-area-puf/{{inputs.plan_year}}_service-area-puf.csv"

  - id: create_service_area_puf_external_table
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Create temporary external table for service area puf data
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.service_area_puf_{{inputs.plan_year}}_ext`
      OPTIONS (
        format = 'CSV',
        uris = ['gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/service-area-puf/*.csv']
      );

  - id: create_service_area_puf_table
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Create external table for service area puf data
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.service_area_puf` (
        BusinessYear INT64,
        StateCode STRING,
        IssuerId INT64,
        SourceName STRING,
        ImportDate TIMESTAMP,
        ServiceAreaId STRING,
        ServiceAreaName STRING,
        CoverEntireState BOOL,
        County INT64,
        PartialCounty BOOL,
        ZipCodes STRING,
        PartialCountyJustification STRING,
        MarketCoverage STRING,
        DentalOnlyPlan BOOL,
        formatted_date date,
      )
      PARTITION by formatted_date;

  - id: insert_service_area_puf_data
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Insert data into the service area puf table
    sql: |
      DELETE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.service_area_puf` where formatted_date = DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01);
      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.service_area_puf`
      SELECT CAST(BusinessYear AS INT64) AS BusinessYear,
      CAST(StateCode AS STRING) AS StateCode,
      CAST(IssuerId AS INT64) AS IssuerId,
      CAST(SourceName AS STRING) AS SourceName,
      CAST(ImportDate AS TIMESTAMP) AS ImportDate,
      CAST(ServiceAreaId AS STRING) AS ServiceAreaId,
      CAST(ServiceAreaName AS STRING) AS ServiceAreaName,
      CAST(CoverEntireState AS BOOL) AS CoverEntireState,
      CAST(County AS INT64) AS County,
      CAST(PartialCounty AS BOOL) AS PartialCounty,
      CAST(ZipCodes AS STRING) AS ZipCodes,
      CAST(PartialCountyJustification AS STRING) AS PartialCountyJustification,
      CAST(MarketCoverage AS STRING) AS MarketCoverage,
      CAST(DentalOnlyPlan AS BOOL) AS DentalOnlyPlan, 
      DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01)  AS formatted_date FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.service_area_puf_{{inputs.plan_year}}_ext`;

  - id: get_rate_puf
    type: io.kestra.plugin.core.http.Download
    description: Download the rate puf file
    uri: https://download.cms.gov/marketplace-puf/{{inputs.plan_year}}/rate-puf.zip

  - id: unzip_rate_puf
    type: io.kestra.plugin.compress.ArchiveDecompress
    description: Unzip the rate puf file
    algorithm: ZIP
    from: "{{ outputs.get_rate_puf.uri }}"

  - id: upload_rate_puf
    type: io.kestra.plugin.gcp.gcs.Upload
    description: Upload the rate puf file to GCS
    from: "{{ outputs.unzip_rate_puf.files['rate-puf.csv'] }}"
    to: "gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/rate-puf/{{inputs.plan_year}}_rate-puf.csv"

  - id: create_rate_puf_temp_external_table
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Create temporary external table for rate puf data
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.rate_puf_{{inputs.plan_year}}_ext`
      OPTIONS (
        format = 'CSV',
        uris = ['gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.plan_year}}/rate-puf/*.csv']
      );

  - id: create_rate_puf_table
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Create external table for rate puf data
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.rate_puf` (
        BusinessYear INT64,
        StateCode STRING,
        IssuerId INT64,
        SourceName STRING,
        ImportDate TIMESTAMP,
        RateEffectiveDate DATE,
        RateExpirationDate DATE,
        PlanId STRING,
        RatingAreaId STRING,
        Tobacco STRING,
        Age STRING,
        IndividualRate FLOAT64,
        IndividualTobaccoRate FLOAT64,
        Couple FLOAT64,
        PrimarySubscriberAndOneDependent FLOAT64,
        PrimarySubscriberAndTwoDependents FLOAT64,
        PrimarySubscriberAndThreeOrMoreDependents FLOAT64,
        CoupleAndOneDependent FLOAT64,
        CoupleAndTwoDependents FLOAT64,
        CoupleAndThreeOrMoreDependents FLOAT64,
        formatted_date date
      )
      PARTITION by formatted_date;

  - id: insert_rate_puf_data
    type: io.kestra.plugin.gcp.bigquery.Query
    description: Insert data into the rate puf external table
    sql: |
      DELETE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.rate_puf` where formatted_date = DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01);
      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.rate_puf`
      SELECT *, DATE(CAST("{{inputs.plan_year}}" AS INT64), 01,01)  AS formatted_date FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.rate_puf_{{inputs.plan_year}}_ext`;

  - id: sync
    type: io.kestra.plugin.git.SyncNamespaceFiles
    url: https://github.com/fsjoyti/dataeng-zoomcamp-final-project
    branch: main
    namespace: "{{flow.namespace}}"
    gitDirectory: dbt/insurance-marketplace-dbt # The directory where the dbt project files are located in the git repo
    dryRun: false
    # disabled: true # this Git Sync is needed only when running it the first time, afterwards the task can be disabled

  - id: dbt-build
    type: io.kestra.plugin.dbt.cli.DbtCLI
    env:
      DBT_DATABASE: "{{kv('GCP_PROJECT_ID')}}"
      DBT_SCHEMA: "{{kv('GCP_DATASET')}}"
    namespaceFiles:
      enabled: true
    containerImage: ghcr.io/kestra-io/dbt-bigquery:latest
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    inputFiles:
      sa.json: "{{kv('GCP_CREDS')}}"
    commands:
      - dbt deps
      - dbt build
    storeManifest:
      key: manifest.json
      namespace: "{{ flow.namespace }}"
    profiles:
      - name: default
        target: dev
        outputs:
          dev:
            type: bigquery
            method: service-account
            project: "{{kv('GCP_PROJECT_ID')}}"
            dataset: "{{kv('GCP_DATASET')}}"
            location: "{{kv('GCP_LOCATION')}}"
            keyfile:  sa.json # this file will be mounted in the container from the inputFiles above
            priority: interactive # this is required for dbt to work in interactive mode, otherwise it will fail with a timeout error
            threads: 16
            timeout_seconds: 300 # increase the timeout for long running queries, adjust as needed based on your workload
            fixed_retries: 1 # retry once on failure, this is useful for transient errors
          target: dev # this is the target that will be used by dbt CLI commands, it should match the output above

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"
